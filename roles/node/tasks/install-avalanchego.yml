# SPDX-License-Identifier: BSD-3-Clause
# Copyright (c) 2022-2024, E36 Knots
---
- name: "Check that AvalancheGo {{ avalanchego_version }} is supported"
  debug:
    msg: "AvalancheGo {{ avalanchego_version }} >= {{ avalanchego_min_version }}"
  run_once: true
  failed_when: not avalanchego_version is version(avalanchego_min_version, 'ge')

- name: "Create {{ avalanchego_group }} group"
  group:
    name: "{{ avalanchego_group }}"

- name: "Create {{ avalanchego_user }} user"
  user:
    name: "{{ avalanchego_user }}"
    group: "{{ avalanchego_group }}"

- name: Create AvalancheGo directories
  file:
    path: "{{ item }}"
    state: directory
    owner: "{{ avalanchego_user }}"
    group: "{{ avalanchego_group }}"
  loop:
    - "{{ avalanchego_plugins_dir }}"
    - "{{ avalanchego_releases_dir }}"
    - "{{ avalanchego_db_dir }}"
    - "{{ avalanchego_subnets_conf_dir }}"
    - "{{ avalanchego_chains_conf_dir }}"
    - "{{ avalanchego_vms_conf_dir }}"
    - "{{ avalanchego_staking_dir }}"
    - "{{ avalanchego_https_certs_dir }}"
    - "{{ avalanchego_log_dir }}"
    - "{{ avalanchego_gpg_dir }}"

- name: Bootstrap database
  include_tasks: bootstrap-db.yml
  when: (avalanchego_bootstrap_db is defined) and (avalanchego_bootstrap_db|length > 0)

- name: Download AvalancheGo GPG key
  get_url:
    url: "{{ avalanchego_gpg_key_url }}"
    dest: "{{ avalanchego_gpg_dir }}/{{ avalanchego_gpg_key_name }}"
    owner: "{{ avalanchego_user }}"
    group: "{{ avalanchego_group }}"

- name: Import AvalancheGo GPG key
  command: "gpg --import {{ avalanchego_gpg_dir }}/{{ avalanchego_gpg_key_name }}"
  register: avalanchego_gpg_import
  changed_when: "'imported: 1' in avalanchego_gpg_import.stderr"

- name: Set avalanchego_binary_arch according to ansible_architecture
  set_fact:
    avalanchego_binary_arch: "{{ 'amd64' if ansible_architecture == 'x86_64' else 'arm64' if ansible_architecture == 'aarch64' else avalanchego_binary_arch }}"

- name: "Download AvalancheGo {{ avalanchego_version }} binary"
  get_url:
    url: "{{ avalanchego_binary_url }}"
    dest: "{{ avalanchego_releases_dir }}/{{ avalanchego_binary_name }}"
    owner: "{{ avalanchego_user }}"
    group: "{{ avalanchego_group }}"

- name: "Download AvalancheGo {{ avalanchego_version }} binary signature"
  get_url:
    url: "{{ avalanchego_binary_url }}.sig"
    dest: "{{ avalanchego_releases_dir }}/{{ avalanchego_binary_name }}.sig"
    owner: "{{ avalanchego_user }}"
    group: "{{ avalanchego_group }}"

- name: Verify AvalancheGo binary GPG signature
  command: "gpg --verify {{ avalanchego_releases_dir }}/{{ avalanchego_binary_name }}.sig {{ avalanchego_releases_dir }}/{{ avalanchego_binary_name }}"
  changed_when: false

- name: "Unpack AvalancheGo {{ avalanchego_version }} binary"
  unarchive:
    src: "{{ avalanchego_releases_dir }}/{{ avalanchego_binary_name }}"
    dest: "{{ avalanchego_install_dir }}"
    owner: "{{ avalanchego_user }}"
    group: "{{ avalanchego_group }}"
    remote_src: true
    creates: "{{ avalanchego_install_dir }}/avalanchego-v{{ avalanchego_version }}"

- name: "Create the symlink to AvalancheGo {{ avalanchego_version }} binary"
  file:
    src: "{{ avalanchego_install_dir }}/avalanchego-v{{ avalanchego_version }}/avalanchego"
    dest: "{{ avalanchego_current_dir }}/avalanchego"
    state: link
    owner: "{{ avalanchego_user }}"
    group: "{{ avalanchego_group }}"
  notify: Restart avalanchego

- name: Template avalanchego.service file
  template:
    src: avalanchego.service.j2
    dest: /etc/systemd/system/avalanchego.service
  notify: Restart avalanchego

- name: Check if running in a Docker container
  stat:
    path: /.dockerenv
  register: dockerenv_stat

- name: Reload systemctl daemons
  systemd:
    daemon_reload: true
  when: not dockerenv_stat.stat.exists
