---
- name: Get P chain address
  uri:
    url: "http://{{ avalanchego_http_host }}:{{ avalanchego_http_port }}/ext/bc/P"
    method: POST
    body_format: json
    body:
      jsonrpc: "2.0"
      method: platform.listAddresses
      params:
        username: "{{ avalanche_node_username }}"
        password: "{{ avalanche_node_password }}"
      id: 1
  register: list_addresses_res
  failed_when: list_addresses_res.json.error is defined or list_addresses_res.json.result.addresses | length < 1

- name: Get current P chain height
  uri:
    url: "http://{{ avalanchego_http_host }}:{{ avalanchego_http_port }}/ext/bc/P"
    method: POST
    body_format: json
    body:
      jsonrpc: "2.0"
      method: platform.getHeight
      id: 1
  register: get_height_res
  failed_when: get_height_res.json.error is defined

- name: Get current P chain validators
  uri:
    url: "http://{{ avalanchego_http_host }}:{{ avalanchego_http_port }}/ext/bc/P"
    method: POST
    body_format: json
    body:
      jsonrpc: "2.0"
      method: platform.getValidatorsAt
      params:
        height: "{{ get_height_res.json.result.height }}"
        subnetID: "11111111111111111111111111111111LpoYY"
      id: 1
  register: get_validators_res
  failed_when: get_validators_res.json.error is defined

- name: Get NodeID
  uri:
    url: "http://{{ avalanchego_http_host }}:{{ avalanchego_http_port }}/ext/info"
    method: POST
    body_format: json
    body:
      jsonrpc: "2.0"
      method: info.getNodeID
      id: 1
  register: get_node_id_res
  failed_when: get_node_id_res.json.error is defined

- name: Add validator if not already validating
  uri:
    url: "http://{{ avalanchego_http_host }}:{{ avalanchego_http_port }}/ext/bc/P"
    method: POST
    body_format: json
    body:
      jsonrpc: "2.0"
      method: platform.addValidator
      params:
        nodeID: "{{ get_node_id_res.json.result.nodeID }}"
        startTime: "{{ ansible_date_time.epoch | int + 60 }}"
        endTime: "{{ ansible_date_time.epoch | int + 60 + 604800 }}"
        stakeAmount: 1000000000
        rewardAddress: "{{ list_addresses_res.json.result.addresses[0] }}"
        delegationFeeRate: 10
        username: "{{ avalanche_node_username }}"
        password: "{{ avalanche_node_password }}"
      id: 1
  when: get_node_id_res.json.result.nodeID not in get_validators_res.json.result.validators
  register: add_validator_res
  failed_when: add_validator_res.json.error is defined
