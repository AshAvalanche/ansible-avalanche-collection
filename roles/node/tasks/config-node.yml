# SPDX-License-Identifier: BSD-3-Clause
# Copyright (c) 2022-2023, E36 Knots
---
- name: Set bootstrap_ip
  set_fact:
    bootstrap_ip: "{{ hostvars[groups['bootstrap_node'][0]]['ansible_host'] }}"
  when: avalanchego_network_id == 'local'

- name: Construct public-ip conf
  set_fact:
    node_conf_public_ip: |
      {{ {'public-ip': ansible_host} if avalanchego_static_public_ip else {} }}

- name: Construct bootstrap-* conf
  set_fact:
    node_conf_bootstrap: |
      {{ {
           'bootstrap-ips': '' if inventory_hostname == groups['bootstrap_node'][0]
             else (bootstrap_ip + ':' + (avalanchego_staking_port | string)),
           'bootstrap-ids': '' if inventory_hostname == groups['bootstrap_node'][0]
             else (avalanchego_bootstrap_node_id) 
         } if avalanchego_network_id == 'local' else {} }}

- name: Construct staking-tls-*-file conf
  set_fact:
    node_conf_staking_tls_files: |
      {{ {
           'staking-tls-cert-file': avalanchego_staking_certs_dir + '/' + inventory_hostname + '.crt',
           'staking-tls-key-file': avalanchego_staking_certs_dir + '/' + inventory_hostname + '.key'
         } if avalanchego_staking_use_local_certs else {} }}

- name: Construct http-tls-*-file conf
  set_fact:
    node_conf_http_tls_files: |
      {{ {
           'http-tls-cert-file': avalanchego_https_cert_file,
           'http-tls-key-file': avalanchego_https_key_file
         } if avalanchego_https_enabled else {} }}

- name: Construct node.json conf
  set_fact:
    node_conf_json: |
      {{ (
        node_conf_public_ip,
        node_conf_bootstrap,
        node_conf_staking_tls_files,
        node_conf_http_tls_files
        ) | combine(avalanchego_node_json) }}

- name: Generate node.json
  copy:
    content: "{{ node_conf_json | to_nice_json(indent=2) }}\n"
    dest: "{{ avalanchego_conf_dir }}/node.json"
    owner: "{{ avalanchego_user }}"
    group: "{{ avalanchego_group }}"
  notify: Restart avalanchego

- name: Upload node staking certificates
  copy:
    src: "{{ avalanchego_staking_local_certs_dir }}/{{ inventory_hostname }}.{{ item }}"
    dest: "{{ avalanchego_staking_certs_dir }}/{{ inventory_hostname }}.{{ item }}"
    owner: "{{ avalanchego_user }}"
    group: "{{ avalanchego_group }}"
    mode: 0400
  loop:
    - crt
    - key
  when: avalanchego_staking_use_local_certs
  notify: Restart avalanchego

# Handle TLS certificates for HTTPS
- block:
    - name: Upload node HTTPS certificates
      copy:
        src: "{{ avalanchego_https_local_certs_dir }}/{{ inventory_hostname }}.{{ item }}"
        dest: "{{ avalanchego_https_certs_dir }}/{{ inventory_hostname }}.{{ item }}"
        owner: "{{ avalanchego_user }}"
        group: "{{ avalanchego_group }}"
        mode: 0400
      loop:
        - crt
        - key
      when: avalanchego_https_local_certs_dir != ""
      notify: Restart avalanchego

    - name: Upload CA certificate
      copy:
        src: "{{ avalanchego_https_local_certs_dir }}/ca.crt"
        dest: "/usr/local/share/ca-certificates/avalanchego-ca.crt"
        owner: "{{ avalanchego_user }}"
        group: "{{ avalanchego_group }}"
        mode: 0444
      when: avalanchego_https_local_certs_dir != ""
      notify: Restart avalanchego

    - name: Trust CA certificate
      command: update-ca-certificates
      register: update_ca_certificates
      changed_when: "'1 added' in update_ca_certificates.stdout"
      notify: Restart avalanchego
  when: avalanchego_https_enabled

- name: Template aliases.json file
  template:
    src: aliases.json.j2
    dest: "{{ avalanchego_vms_conf_dir }}/aliases.json"
    lstrip_blocks: true
    owner: "{{ avalanchego_user }}"
    group: "{{ avalanchego_group }}"
  notify: New VM
