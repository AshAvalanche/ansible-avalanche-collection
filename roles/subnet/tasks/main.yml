# Copyright (C) 2022, Gauthier Leonard
# See the file LICENSE for licensing terms.
---
- name: Wait for P-Chain to be bootstrapped
  uri:
    url: "http://{{ avalanchego_http_host }}:{{ avalanchego_http_port }}/ext/info"
    method: POST
    body_format: json
    body:
      jsonrpc: "2.0"
      method: info.isBootstrapped
      params:
        chain: P
      id: 1
  register: bootstrapped_res
  failed_when: bootstrapped_res.json.error is defined
  until: bootstrapped_res.json.result.isBootstrapped
  retries: 10

- name: Check that subnet control user exists
  uri:
    url: "http://{{ avalanchego_http_host }}:{{ avalanchego_http_port }}/ext/keystore"
    method: POST
    body_format: json
    body:
      jsonrpc: "2.0"
      method: keystore.listUsers
      id: 1
  register: users_list_res
  failed_when: >
    (users_list_res.json.error is defined) or
    (subnet_control_username not in users_list_res.json.result.users)

- name: Check that subnet control user owns the control keys
  uri:
    url: "http://{{ avalanchego_http_host }}:{{ avalanchego_http_port }}/ext/bc/P"
    method: POST
    body_format: json
    body:
      jsonrpc: "2.0"
      method: platform.listAddresses
      params:
        username: "{{ subnet_control_username }}"
        password: "{{ subnet_control_password }}"
      id: 1
  register: user_addr_res
  failed_when: >
    (user_addr_res.json.error is defined) or
    not (subnet_control_keys | intersect(user_addr_res.json.result.addresses) | length)

- name: Get existing subnets list
  uri:
    url: "http://{{ avalanchego_http_host }}:{{ avalanchego_http_port }}/ext/bc/P"
    method: POST
    body_format: json
    body:
      jsonrpc: "2.0"
      method: platform.getSubnets
      id: 1
  register: subnets_list_res

- name: Get existing subnets with the same control keys
  set_fact:
    subnets_w_same_keys_ids: '{{ subnets_list_res.json.result | to_json | from_json | json_query("subnets[?sort(controlKeys)==sort([''" + (subnet_control_keys | join("'',''")) + "''])].id") }}'

- name: Confirm subnet creation
  pause:
    prompt: >-
      A subnet using the same control keys already exists.
      Are you sure you want to create another one? [yes/no]
  register: confirm_prompt
  when: subnets_w_same_keys_ids | length

- name: Abort subnet creation
  meta: end_play
  when: not (confirm_prompt.user_input | default('yes') | bool)

- name: Create the subnet
  ash.avalanche.tx:
    http_host: "{{ avalanchego_http_host }}"
    blockchain: P
    method: platform.createSubnet
    username: "{{ subnet_control_username }}"
    password: "{{ subnet_control_password }}"
    params:
      controlKeys: "{{ subnet_control_keys }}"
      threshold: "{{ subnet_control_keys_threshold }}"
    wait_validation: yes

- name: Get subnets list
  uri:
    url: "http://{{ avalanchego_http_host }}:{{ avalanchego_http_port }}/ext/bc/P"
    method: POST
    body_format: json
    body:
      jsonrpc: "2.0"
      method: platform.getSubnets
      id: 1
  register: subnets_list_res

- name: Get subnets with the same control keys
  set_fact:
    subnets_w_same_keys_after: '{{ subnets_list_res.json.result | to_json | from_json |  json_query("subnets[?sort(controlKeys)==sort([''" + (subnet_control_keys | join("'',''")) + "''])]") }}'

- name: Get created subnet info
  set_fact:
    subnet_info: '{{ subnets_w_same_keys_after | json_query("[?!contains([''" + (subnets_w_same_keys_ids | join("'',''")) + "''], id)]") | first }}'

- name: Get validators nodeIDs 1/2
  uri:
    url: "http://{{ hostvars[item]['avalanchego_http_host'] }}:{{ hostvars[item]['avalanchego_http_port'] | default(avalanchego_http_port) }}/ext/info"
    method: POST
    body_format: json
    body:
      jsonrpc: "2.0"
      method: info.getNodeID
      id: 1
  register: node_ids_res
  failed_when: node_ids_res.json.error is defined
  delegate_to: "{{ item }}"
  loop: "{{ groups['subnet_validators'] }}"

- name: Get validators nodeIDs 2/2
  set_fact:
    validators_ids: "{{ node_ids_res | json_query('results[*].json.result.nodeID') }}"

- name: Add validators to the subnet
  ash.avalanche.tx:
    http_host: "{{ avalanchego_http_host }}"
    blockchain: P
    method: platform.addSubnetValidator
    username: "{{ subnet_control_username }}"
    password: "{{ subnet_control_password }}"
    params:
      nodeID: "{{ item }}"
      subnetID: "{{ subnet_info.id }}"
      startTime: "{{ subnet_validators_starttime }}"
      endTime: "{{ subnet_validators_endtime }}"
      weight: "{{ subnet_validators_weight }}"
    wait_validation: yes
  loop: "{{ validators_ids }}"

- name: Display created subnet info
  debug:
    msg: |-
      The subnet has been created and the validators added.
      Make sure to add the subnet ID to the whitelisted-subnets list of the validators.
      Subnet ID = {{ subnet_info.id }}
