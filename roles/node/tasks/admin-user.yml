---
- name: Check if node user account already exists
  uri:
    url: "http://{{ avalanchego_http_host }}:{{ avalanchego_http_port }}/ext/keystore"
    method: POST
    body_format: json
    body:
      jsonrpc: "2.0"
      method: keystore.listUsers
      id: 1
  register: list_users_res
  failed_when: list_users_res.json.error is defined

- name: Create node user account
  uri:
    url: "http://{{ avalanchego_http_host }}:{{ avalanchego_http_port }}/ext/keystore"
    method: POST
    body_format: json
    body:
      jsonrpc: "2.0"
      method: keystore.createUser
      params:
        username: "{{ avalanche_node_username }}"
        password: "{{ avalanche_node_password }}"
      id: 1
  when: avalanche_node_username not in list_users_res.json.result.users
  register: users_create_res
  failed_when: users_create_res.json.error is defined

- name: Check if P chain address already exists
  uri:
    url: "http://{{ avalanchego_http_host }}:{{ avalanchego_http_port }}/ext/bc/P"
    method: POST
    body_format: json
    body:
      jsonrpc: "2.0"
      method: platform.listAddresses
      params:
        username: "{{ avalanche_node_username }}"
        password: "{{ avalanche_node_password }}"
      id: 1
  register: list_addresses_res
  failed_when: list_addresses_res.json.error is defined

- name: Create P chain address for node user account
  uri:
    url: "http://{{ avalanchego_http_host }}:{{ avalanchego_http_port }}/ext/bc/P"
    method: POST
    body_format: json
    body:
      jsonrpc: "2.0"
      method: platform.createAddress
      params:
        username: "{{ avalanche_node_username }}"
        password: "{{ avalanche_node_password }}"
      id: 1
  when: list_addresses_res.json.result.addresses | length < 1
  register: create_address_res
  failed_when: create_address_res.json.error is defined
